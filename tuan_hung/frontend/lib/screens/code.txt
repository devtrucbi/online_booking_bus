import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:tuan_hung/widgets/custom_appbar.dart';
import 'package:animate_do/animate_do.dart';

class AdminBookingsScreen extends StatelessWidget {
  const AdminBookingsScreen({super.key});

  Future<List<Map<String, dynamic>>> _fetchAllBookings() async {
    final bookingsSnapshot =
        await FirebaseFirestore.instance.collection('bookings').get();
    return bookingsSnapshot.docs.map((doc) => doc.data()).toList();
  }

  Future<void> _deleteBooking(
    String bookingId,
    String tripId,
    List<String>? seats,
  ) async {
    if (seats == null || seats.isEmpty) {
      throw Exception('Không có ghế để khôi phục');
    }

    try {
      // Xóa vé từ collection 'bookings'
      await FirebaseFirestore.instance
          .collection('bookings')
          .doc(bookingId)
          .delete();

      // Khôi phục ghế vào collection 'chuyen_xe'
      final tripRef = FirebaseFirestore.instance
          .collection('chuyen_xe')
          .doc(tripId);
      await tripRef.update({
        'availableSeats': FieldValue.arrayUnion(
          seats,
        ), // Thêm ghế trở lại danh sách availableSeats
      });
    } catch (e) {
      throw Exception('Lỗi khi xóa vé: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBar(title: 'Quản lý đặt vé'),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Colors.yellow, Colors.amber],
          ),
        ),
        child: SafeArea(
          child: FutureBuilder<List<Map<String, dynamic>>>(
            future: _fetchAllBookings(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              } else if (snapshot.hasError) {
                return Center(
                  child: Text(
                    'Lỗi: ${snapshot.error}',
                    style: const TextStyle(
                      color: Colors.redAccent,
                      fontFamily: 'Roboto',
                    ),
                  ),
                );
              } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                return const Center(
                  child: Text(
                    'Không có vé nào được đặt',
                    style: TextStyle(
                      fontSize: 18,
                      fontFamily: 'Roboto',
                      color: Colors.black54,
                    ),
                  ),
                );
              }

              final bookings = snapshot.data!;
              return ListView.builder(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16.0,
                  vertical: 8.0,
                ),
                itemCount: bookings.length,
                itemBuilder: (context, index) {
                  final booking = bookings[index];
                  final tripId =
                      booking['tripId'] as String? ?? 'Không xác định';
                  final seats =
                      booking['seats'] != null
                          ? List<String>.from(booking['seats'])
                          : null;
                  final bookingId =
                      booking['id'] as String? ?? 'Không xác định';
                  final userId =
                      booking['userId'] as String? ?? 'Không xác định';

                  return FadeInUp(
                    duration: const Duration(milliseconds: 500),
                    delay: Duration(milliseconds: 100 * index),
                    child: Card(
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      margin: const EdgeInsets.symmetric(vertical: 8.0),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Người dùng: $userId',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                fontFamily: 'Poppins',
                                color: Colors.black87,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'Chuyến xe: ${booking['from'] ?? 'Không xác định'} - ${booking['to'] ?? 'Không xác định'}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                color: Colors.black54,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'Ngày: ${booking['date'] ?? 'Không xác định'} - ${booking['time'] ?? 'Không xác định'}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                color: Colors.black54,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'Ghế: ${seats != null && seats.isNotEmpty ? seats.join(", ") : 'Không có ghế'}',
                              style: const TextStyle(
                                fontFamily: 'Roboto',
                                color: Colors.black54,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: [
                                TextButton(
                                  onPressed: () async {
                                    try {
                                      await _deleteBooking(
                                        bookingId,
                                        tripId,
                                        seats,
                                      );
                                      ScaffoldMessenger.of(
                                        context,
                                      ).showSnackBar(
                                        const SnackBar(
                                          content: Text('Xóa vé thành công'),
                                        ),
                                      );
                                      // Cập nhật giao diện
                                      (context as Element).markNeedsBuild();
                                    } catch (e) {
                                      ScaffoldMessenger.of(
                                        context,
                                      ).showSnackBar(
                                        SnackBar(content: Text('Lỗi: $e')),
                                      );
                                    }
                                  },
                                  child: const Text(
                                    'Xóa vé',
                                    style: TextStyle(
                                      color: Colors.redAccent,
                                      fontFamily: 'Poppins',
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ),
    );
  }
}
